EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
laboratory_3.exe -- emu8086 assembler version: 4.08  
 
[ 09.10.2024  --  21:33:03 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .data
[   3]    0000: 03 05 07                              array db 3, 5, 7 ; Пример массива из 3 байт (можно заменить на нужные значения)
[   4]    0003: 00 00 00 00 00 00 00 00               result db 8 dup(0) ; Массив для хранения результатов
[   5]        :                                       
[   6]        :                                       .code
[   7]    0010:                                       main:
[   8]    0010: B8 00 00                              mov ax, @data
[   9]    0013: 8E D8                                 mov ds, ax
[  10]        :                                       
[  11]        :                                       ; Значение для исключающего ИЛИ
[  12]    0015: B3 65                                 mov bl, 101 ; 101 в десятичной системе
[  13]        :                                       
[  14]        :                                       ; Обработка 8 трехразрядных слов
[  15]    0017: B9 08 00                              mov cx, 8 ; Количество слов
[  16]    001A: BE 00 00                              lea si, array ; Указатель на массив
[  17]    001D: BF 03 00                              lea di, result ; Указатель на массив результатов
[  18]        :                                       
[  19]    0020:                                       next_word:
[  20]    0020: 8A 04                                 mov al, [si] ; Загружаем текущее слово
[  21]    0022: 32 C3                                 xor al, bl ; Выполняем исключающее ИЛИ с 101
[  22]    0024: 88 05                                 mov [di], al ; Сохраняем результат
[  23]    0026: 46                                    inc si ; Переходим к следующему слову
[  24]    0027: 47                                    inc di ; Переходим к следующему результату
[  25]    0028: E2 F6                                 loop next_word ; Повторяем, пока cx не станет 0
[  26]        :                                       
[  27]        :                                       ; Завершение программы
[  28]    002A: B8 00 4C                              mov ax, 4C00h
[  29]    002D: CD 21                                 int 21h
[  30]        :                                       end main
[  31]        :                                       
[  32]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 2F      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: E6      -   check sum (l.byte)
0013: 0A      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
