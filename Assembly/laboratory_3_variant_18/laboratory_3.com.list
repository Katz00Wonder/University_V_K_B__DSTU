EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
laboratory_3.com -- emu8086 assembler version: 4.08  
 
[ 09.10.2024  --  21:42:43 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       org 100h
[   2]    0100: EB 0C                                 begin:  jmp start
[   3]    0102: 2A 2A 2A                              db "***" ; для красоты - чтобы были видны наши данные
[   4]    0105: A7 FC 92                              NB db 10100111b, 11111100b, 10010010b ; старший бит, байт - первым
[   5]    0108: 2A 2A 2A                              db "***" ;
[   6]    010B: A0 00 00                              xorop db 10100000b,0,0 ; маска операции xor
[   7]        :                                       
[   8]    010E: E8 01 00                              start:call doxor
[   9]        :                                       ;     call doxor ; проверочный вызов - при двойном xor результат не должен меняться
[  10]    0111: C3                                    ret ; выход в эмулятор
[  11]        :                                       
[  12]    0112:                                       doxor:
[  13]    0112: B3 A0                                 mov bl,10100000b ; 101 - старшие биты
[  14]    0114: B7 00                                 mov bh,0
[  15]    0116: BF 0B 01                              lea di,xorop
[  16]    0119: 88 1D                                 mov [di],bl
[  17]    011B: 88 7D 01                              mov [di+1],bh
[  18]    011E: 88 7D 02                              mov [di+2],bh
[  19]    0121: B9 08 00                              mov cx,8 ; цикл 8 раз
[  20]    0124:                                       m0:
[  21]    0124: BE 05 01                              lea si,NB  ; выполняем операцию xor
[  22]    0127: 8A 05                                 mov al,[di]
[  23]    0129: 30 04                                 xor [si],al
[  24]        :                                       
[  25]    012B: 8A 45 01                              mov al,[di+1]
[  26]    012E: 30 44 01                              xor [si+1],al
[  27]        :                                       
[  28]    0131: 8A 45 02                              mov al,[di+2]
[  29]    0134: 30 44 02                              xor [si+2],al
[  30]        :                                       
[  31]    0137: F8                                    clc   ; сдвигаем маску xor 3 раза вправо
[  32]    0138: D0 1D                                 rcr byte ptr [di],1
[  33]    013A: D0 5D 01                              rcr byte ptr [di+1],1
[  34]    013D: D0 5D 02                              rcr byte ptr [di+2],1
[  35]        :                                       
[  36]    0140: F8                                    clc
[  37]    0141: D0 1D                                 rcr byte ptr [di],1
[  38]    0143: D0 5D 01                              rcr byte ptr [di+1],1
[  39]    0146: D0 5D 02                              rcr byte ptr [di+2],1
[  40]        :                                       
[  41]    0149: F8                                    clc
[  42]    014A: D0 1D                                 rcr byte ptr [di],1
[  43]    014C: D0 5D 01                              rcr byte ptr [di+1],1
[  44]    014F: D0 5D 02                              rcr byte ptr [di+2],1
[  45]        :                                       
[  46]    0152: E2 D0                                 loop m0
[  47]    0154: C3                                    ret
[  48]        :                                       
 
===================================================================================================
 




===================================================================================================
