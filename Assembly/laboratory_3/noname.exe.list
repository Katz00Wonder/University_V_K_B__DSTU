EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
noname.exe -- emu8086 assembler version: 4.08  
 
[ 17.09.2025  --  14:30:33 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       
[   4]        :                                       .data
[   5]        :                                       ; Массив слов (16-битных значений)
[   6]    0100: 05 00 FD FF 08 00 01 00 F9 FF 0C 00   numbers dw 5, -3, 8, 1, -7, 12, 0, 4, -2, 9
                00 00 04 00 FE FF 09 00             
[   7]    0114:                                       count equ ($ - numbers) / 2  ; Количество элементов в массиве
[   8]        :                                       
[   9]        :                                       ; Сообщения
[  10]    0114: 50 6F 73 69 74 69 76 65 20 6E 75 6D   msg_positive db 'Positive numbers found: $'
                62 65 72 73 20 66 6F 75 6E 64 3A 20 
                24                                  
[  11]    012D: 0D 0A 4D 69 6E 69 6D 75 6D 20 70 6F   msg_min db 0Dh, 0Ah, 'Minimum positive number: $'
                73 69 74 69 76 65 20 6E 75 6D 62 65 
                72 3A 20 24                         
[  12]    0149: 0D 0A 4E 6F 20 70 6F 73 69 74 69 76   msg_none db 0Dh, 0Ah, 'No positive numbers found$'
                65 20 6E 75 6D 62 65 72 73 20 66 6F 
                75 6E 64 24                         
[  13]    0165: 20 24                                 msg_space db ' $'
[  14]        :                                       
[  15]    0167: 00 00                                 min_value dw ?        ; Для хранения минимального положительного числа
[  16]    0169: 00                                    found_flag db 0       ; Флаг: найдены ли положительные числа
[  17]        :                                       
[  18]        :                                       .code
[  19]    0170:                                       main proc
[  20]    0170: B8 10 00                              mov ax, @data
[  21]    0173: 8E D8                                 mov ds, ax
[  22]        :                                       
[  23]        :                                       ; Инициализация
[  24]    0175: B9 0A 00                              mov cx, count         ; Загружаем количество элементов
[  25]    0178: BE 00 00                              mov si, offset numbers ; Указатель на начало массива
[  26]    017B: C6 06 69 00 00                        mov found_flag, 0     ; Сбрасываем флаг
[  27]        :                                       
[  28]        :                                       ; Поиск первого положительного числа для инициализации min_value
[  29]    0180: BB FF FF                              mov bx, 0FFFFh        ; Начальное значение (максимальное возможное)
[  30]        :                                       
[  31]    0183:                                       find_first_positive:
[  32]    0183: 8B 04                                 mov ax, [si]          ; Загружаем текущее число
[  33]    0185: 85 C0                                 test ax, ax           ; Проверяем знак
[  34]    0187: 7E 0C                                 jle next_element      ; Если <= 0, пропускаем
[  35]        :                                       
[  36]        :                                       ; Нашли первое положительное число
[  37]    0189: 8B D8                                 mov bx, ax           ; Инициализируем минимум
[  38]    018B: A3 67 00                              mov min_value, ax
[  39]    018E: C6 06 69 00 01                        mov found_flag, 1    ; Устанавливаем флаг
[  40]    0193: EB 0C                                 jmp continue_search
[  41]        :                                       
[  42]    0195:                                       next_element:
[  43]    0195: 83 C6 02                              add si, 2            ; Переходим к следующему элементу
[  44]    0198: E2 E9                                 loop find_first_positive
[  45]        :                                       
[  46]        :                                       ; Если не найдено положительных чисел
[  47]    019A: 80 3E 69 00 00                        cmp found_flag, 0
[  48]    019F: 74 2B                                 je no_positive
[  49]        :                                       
[  50]    01A1:                                       continue_search:
[  51]        :                                       ; Продолжаем поиск минимального положительного числа
[  52]    01A1: B9 09 00                              mov cx, count - 1    ; Оставшиеся элементы
[  53]    01A4: 83 C6 02                              add si, 2            ; Переходим к следующему элементу
[  54]        :                                       
[  55]    01A7:                                       search_loop:
[  56]    01A7: 8B 04                                 mov ax, [si]         ; Загружаем текущее число
[  57]        :                                       
[  58]        :                                       ; Проверяем, положительное ли число
[  59]    01A9: 85 C0                                 test ax, ax
[  60]    01AB: 7E 0E                                 jle skip_negative    ; Если <= 0, пропускаем
[  61]        :                                       
[  62]        :                                       ; Сравниваем с текущим минимумом
[  63]    01AD: 3B C3                                 cmp ax, bx
[  64]    01AF: 7D 05                                 jge skip_positive    ; Если больше или равно, пропускаем
[  65]        :                                       
[  66]        :                                       ; Нашли новый минимум
[  67]    01B1: 8B D8                                 mov bx, ax
[  68]    01B3: A3 67 00                              mov min_value, ax
[  69]        :                                       
[  70]    01B6:                                       skip_positive:
[  71]    01B6: C6 06 69 00 01                        mov found_flag, 1    ; Устанавливаем флаг, что нашли положительное
[  72]        :                                       
[  73]    01BB:                                       skip_negative:
[  74]    01BB: 83 C6 02                              add si, 2            ; Переходим к следующему элементу
[  75]    01BE: E2 E7                                 loop search_loop
[  76]        :                                       
[  77]        :                                       ; Проверяем, были ли найдены положительные числа
[  78]    01C0: 80 3E 69 00 00                        cmp found_flag, 0
[  79]    01C5: 74 05                                 je no_positive
[  80]        :                                       
[  81]        :                                       ; Вывод результатов
[  82]    01C7: E8 10 00                              call display_results
[  83]    01CA: EB 09                                 jmp exit_program
[  84]        :                                       
[  85]    01CC:                                       no_positive:
[  86]        :                                       ; Вывод сообщения об отсутствии положительных чисел
[  87]    01CC: B4 09                                 mov ah, 09h
[  88]    01CE: BA 49 00                              lea dx, msg_none
[  89]    01D1: CD 21                                 int 21h
[  90]    01D3: EB 00                                 jmp exit_program
[  91]        :                                       
[  92]    01D5:                                       exit_program:
[  93]    01D5: B8 00 4C                              mov ax, 4C00h
[  94]    01D8: CD 21                                 int 21h
[  95]        :                                       main endp
[  96]        :                                       
[  97]        :                                       ; Процедура для вывода результатов
[  98]    01DA:                                       display_results proc
[  99]        :                                       ; Вывод заголовка
[ 100]    01DA: B4 09                                 mov ah, 09h
[ 101]    01DC: BA 14 00                              lea dx, msg_positive
[ 102]    01DF: CD 21                                 int 21h
[ 103]        :                                       
[ 104]        :                                       ; Вывод всех положительных чисел
[ 105]    01E1: B9 0A 00                              mov cx, count
[ 106]    01E4: BE 00 00                              mov si, offset numbers
[ 107]        :                                       
[ 108]    01E7:                                       print_loop:
[ 109]    01E7: 8B 04                                 mov ax, [si]
[ 110]    01E9: 85 C0                                 test ax, ax
[ 111]    01EB: 7E 0A                                 jle skip_print
[ 112]        :                                       
[ 113]        :                                       ; Вывод положительного числа
[ 114]    01ED: E8 1A 00                              call print_number
[ 115]    01F0: B4 09                                 mov ah, 09h
[ 116]    01F2: BA 65 00                              lea dx, msg_space
[ 117]    01F5: CD 21                                 int 21h
[ 118]        :                                       
[ 119]    01F7:                                       skip_print:
[ 120]    01F7: 83 C6 02                              add si, 2
[ 121]    01FA: E2 EB                                 loop print_loop
[ 122]        :                                       
[ 123]        :                                       ; Вывод минимального положительного числа
[ 124]    01FC: B4 09                                 mov ah, 09h
[ 125]    01FE: BA 2D 00                              lea dx, msg_min
[ 126]    0201: CD 21                                 int 21h
[ 127]        :                                       
[ 128]    0203: A1 67 00                              mov ax, min_value
[ 129]    0206: E8 01 00                              call print_number
[ 130]        :                                       
[ 131]    0209: C3                                    ret
[ 132]        :                                       display_results endp
[ 133]        :                                       
[ 134]        :                                       ; Процедура для вывода числа (16-битное)
[ 135]    020A:                                       print_number proc
[ 136]    020A: 50                                    push ax
[ 137]    020B: 53                                    push bx
[ 138]    020C: 51                                    push cx
[ 139]    020D: 52                                    push dx
[ 140]        :                                       
[ 141]    020E: BB 0A 00                              mov bx, 10          ; Основание системы счисления
[ 142]    0211: 33 C9                                 xor cx, cx          ; Счетчик цифр
[ 143]        :                                       
[ 144]        :                                       ; Проверка знака
[ 145]    0213: 85 C0                                 test ax, ax
[ 146]    0215: 79 0A                                 jns convert_loop
[ 147]    0217: F7 D8                                 neg ax              ; Если отрицательное, делаем положительным
[ 148]    0219: 50                                    push ax
[ 149]    021A: B2 2D                                 mov dl, '-'
[ 150]    021C: B4 02                                 mov ah, 02h
[ 151]    021E: CD 21                                 int 21h
[ 152]    0220: 58                                    pop ax
[ 153]        :                                       
[ 154]    0221:                                       convert_loop:
[ 155]    0221: 33 D2                                 xor dx, dx
[ 156]    0223: F7 F3                                 div bx              ; Делим AX на 10
[ 157]    0225: 52                                    push dx             ; Сохраняем остаток (цифру)
[ 158]    0226: 41                                    inc cx              ; Увеличиваем счетчик цифр
[ 159]    0227: 85 C0                                 test ax, ax
[ 160]    0229: 75 F6                                 jnz convert_loop
[ 161]        :                                       
[ 162]    022B:                                       print_digits:
[ 163]    022B: 5A                                    pop dx              ; Извлекаем цифру
[ 164]    022C: 80 C2 30                              add dl, '0'         ; Преобразуем в символ
[ 165]    022F: B4 02                                 mov ah, 02h         ; Вывод символа
[ 166]    0231: CD 21                                 int 21h
[ 167]    0233: E2 F6                                 loop print_digits
[ 168]        :                                       
[ 169]    0235: 5A                                    pop dx
[ 170]    0236: 59                                    pop cx
[ 171]    0237: 5B                                    pop bx
[ 172]    0238: 58                                    pop ax
[ 173]    0239: C3                                    ret
[ 174]        :                                       print_number endp
[ 175]        :                                       
[ 176]        :                                       end main
[ 177]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 3A      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 53      -   check sum (l.byte)
0013: C5      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 17      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 17      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
